@import "normalize.css";

$black: #252525;
$wa-primary: #5e2c80;
$wa-dark-primary: #3b2050;
$wa-light-primary: #6f418f;
$wa-contrast: #f3f3f3;
$wa-dark-contrast: #9b9b9b;
$wa-light-contrast: #ffffff;
$js-primary: #F2BB4D;
$js-dark-primary: #A47E30;
$js-light-primary: #FFDE60;
$js-contrast: #212121;
$js-dark-contrast: #0F0F0F;
$js-light-contrast: #242424;

$sansFontFamily: "Helvetica Neue", Helvetica, Arial, sans-serif;
$lightSansFontFamily: $sansFontFamily;

body {
  background-color: #fff;
  font-family: $sansFontFamily;
  font-weight: 300;
  color: $black;
  min-height: 740px;
  line-height: 1.4;
}

h1, h2, h3, h4, h5 {
  font-family: $sansFontFamily;
  font-weight: 300;
  margin: 0;
  padding: 0;
}

$transition-time: 1s;

svg {
  transform-style: preserve-3d;
}

.step {
  position: relative;
  margin: 20px auto;

  width: 1000px;
  height: 700px;
  padding: 0;
  margin: 0;

  &.present, &.active {
    opacity: 1;
  }
}

// Sass bug seems to mean the variables don't resolve, so don't use. SAD FACE!
@mixin bricks-colours($primary,  $dark-primary,  $light-primary,
                      $contrast, $dark-contrast, $light-contrast) {
  --primary: $primary;
  --dark-primary: $dark-primary;
  --light-primary: $light-primary;
  --contrast: $contrast;
  --dark-contrast: $dark-contrast;
  --light-contrast: $light-contrast;
}
#web-assembly-bricks {
  --primary: #5e2c80;
  --dark-primary: #3b2050;
  --light-primary: #6f418f;
  --contrast: #f3f3f3;
  --dark-contrast: #9b9b9b;
  --light-contrast: #ffffff;
}
#javascript-bricks {
  --primary: #F2BB4D;
  --dark-primary: #A47E30;
  --light-primary: #FFDE60;
  --contrast: #212121;
  --dark-contrast: #0F0F0F;
  --light-contrast: #242424;
}

#web-assembly-bricks,
#javascript-bricks {
  g {
    transition-property: transform;
    transition-duration: $transition-time;
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
}

.block, .top {
  fill: var(--primary);
  stroke: $black;
  stroke-width: 0.5;
  stroke-linejoin: round;
}

.primary {
  .standard {
    fill: var(--primary);
  }
  .dark {
    fill: var(--dark-primary);
  }
  .light {
    fill: var(--light-primary);
  }
}

.contrast {
  .standard {
    fill: var(--contrast);
  }
  .dark {
    fill: var(--dark-contrast);
  }
  .light {
    fill: var(--light-contrast);
  }
}

#web-assembly-bricks {
  .primary {
    .gradient {
      fill: url(#wa-primary-gradient);
    }
  }
  .contrast {
    .gradient {
      fill: url(#wa-contrast-gradient);
    }
  }
}
#wa-primary-gradient {
  .stop1 {
    stop-color: $wa-dark-primary;
  }
  .stop2 {
    stop-color: $wa-light-primary;
  }
}
#wa-contrast-gradient {
  .stop1 {
    stop-color: $wa-dark-contrast;
  }
  .stop2 {
    stop-color: $wa-light-contrast;
  }
}
#javascript-bricks {
  .primary {
    .gradient {
      fill: url(#js-primary-gradient);
    }
  }
  .contrast {
    .gradient {
      fill: url(#js-contrast-gradient);
    }
  }
}
#js-primary-gradient {
  .stop1 {
    stop-color: $js-dark-primary;
  }
  .stop2 {
    stop-color: $js-light-primary;
  }
}
#js-contrast-gradient {
  .stop1 {
    stop-color: $js-dark-contrast;
  }
  .stop2 {
    stop-color: $js-light-contrast;
  }
}

#wa-intro,
#js-intro {
  text-align: center;
  svg {
    height: 100%;
  }
}

@for $i from 1 through 9 {
  .impress-on-wa-step-#{$i} {
    @for $j from ($i + 1) through 10 {
      #web-assembly-bricks {
        .row-#{$j} {
          transform: translateY(-1000px);
        }
      }
    }
  }
}

@for $i from 1 through 9 {
  .impress-on-js-step-#{$i} {
    @for $j from ($i + 1) through 10 {
      #javascript-bricks {
        .row-#{$j} {
          transform: translateY(-1000px);
        }
      }
    }
  }
}

@for $i from 0 through 11 {
  #web-assembly-bricks,
  #javascript-bricks {
    .piece-#{$i + 1} {
      transition-delay: (12 - $i) * 0.2s;
    }
  }
}
